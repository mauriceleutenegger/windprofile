To build and install the python interface for windprofile:

./setup.py install 
#(should work for most situations) or
./setup.py install --prefix=/path/to/python/libs/
#or
./setup.py install --home=~
#(will install in ~/lib/python/)

This will compile and install the module. 

The scripts testLx.py and testOpticalDepth.py give an idea of how to invoke the functions.
They are:

PyWindProfile.Lx (x, q, U0, Umin, beta, TauStar, h,
                 Tau0Star, betaSobolev, kappaRatio, \
                 isOpticallyThick, isNumerical, isAnisotropic, isRosseland,\
                 isExpansion, isHeII)
where x is an array of double to calculate Lx on, 
the next seven parameters are double, and the last five are (bool) int.

PyWindProfile.OpticalDepth (p, z, Taustar, h, beta, 
			 numerical, anisotropic, rosseland, expansion)
where p and z are double coordinates to find tpz for, 
the next three parameters are double,
and the last four are (bool) int.

PyWindProfile.OpticalDepth2D (p, z, Taustar, h, beta, 
			 numerical, anisotropic, rosseland, expansion)
is the same as OpticalDepth, but it allows you to pass two numpy.array
objects instead of individual p and z coordinates. This can be
quite a bit faster, depending on the number of points.

Requirements:
python 
numpy
pylab (if you want to make test plots)

I have tested this on EPD 7.3.1: Python 2.7.3; numpy 1.6.1. 
ML Oct 2012.

Updated documentation to reflect evolution of package.
Current configuation:
conda 4.5.3
python 2.7.14
numpy 1.14.3
ML May 2018

Made major fixes to packaging, python 2.7/3.X compatibility.
Also modernized and simplified C++-numpy interface calls.
ML March 2020